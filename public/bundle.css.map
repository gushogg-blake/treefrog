{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../App.svelte",
    "../Editor.svelte"
  ],
  "sourcesContent": [
    "<script>\nlet fs = require(\"flowfs\");\n\nimport {onMount} from \"svelte\";\nimport Document from \"./modules/Document\";\nimport Editor from \"./components/Editor.svelte\";\n\nlet document;\n\nonMount(async function() {\n\tlet code = await fs(\"test/repos/bluebird/js/browser/bluebird.js\").read();\n\t\n\tdocument = new Document(code);\n});\n</script>\n\n<style type=\"text/scss\">#main {\n  display: -webkit-box;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n          flex-direction: column;\n  height: 100vh; }\n/*# sourceMappingURL=src/App.svelte.map */</style>\n\n<div id=\"main\">\n\t{#if document}\n\t\t<Editor\n\t\t\t{document}\n\t\t\tlang=\"js\"\n\t\t/>\n\t{/if}\n</div>\n",
    "<script>\nimport js from \"../modules/langs/js\";\nimport render from \"../modules/render/render\";\nimport calculateMarginOffset from \"../modules/render/calculateMarginOffset\";\n/*\nlet js = require(\"../src/modules/langs/js\");\nlet render = require(\"../src/modules/render/render\");\nlet calculateMarginOffset = require(\"../src/modules/render/calculateMarginOffset\");\n\n*/\nimport {onMount} from \"svelte\";\nimport sleep from \"../utils/sleep\";\nimport inlineStyle from \"../utils/dom/inlineStyle\";\n//import render from \"../modules/render/render\";\nimport prefs from \"../stores/prefs\";\n\nexport let document;\nexport let lang;\n\nlet main;\nlet measurementsDiv;\nlet canvas;\nlet context;\nlet measurements;\nlet coordsXHint = 2;\n\nlet selection = {\n\tstart: [0, 0],\n\tend: [0, 0],\n};\n\nlet scrollPosition = {\n\trow: 0,\n\tcol: 0,\n};\n\nlet hiliteWord = null;\n\nfunction mousedown(e) {\n\tlet {\n\t\tcolWidth,\n\t\trowHeight,\n\t} = measurements;\n\t\n\tlet {\n\t\tx: left,\n\t\ty: top,\n\t} = canvas.getBoundingClientRect();\n\t\n\tlet marginOffset = calculateMarginOffset(document.lines, measurements);\n\tlet x = e.clientX - left - margin.widthPlusGap + scrollPosition.col + coordsXHint;\n\tlet y = e.clientY - top;\n\t\n\tlet cursorCol = Math.round(x / colWidth);\n\t\n\tlet screenLine = Math.floor(y / rowHeight);\n\t\n\tconsole.log(screenLine, cursorCol);\n}\n\nfunction mousemove(e) {\n\t//console.log(e);\n}\n\nfunction mouseup(e) {\n\t//console.log(e);\n}\n\nfunction wheel(e) {\n\tlet dir = e.deltaY > 0 ? 1 : -1;\n\t\n\tif (e.shiftKey) {\n\t\tlet newCol = Math.round(scrollPosition.col + measurements.colWidth * 3 * dir);\n\t\t\n\t\tnewCol = Math.max(0, newCol);\n\t\t\n\t\tscrollPosition.col = newCol;\n\t} else {\n\t\tlet newRow = scrollPosition.row + 3 * dir;\n\t\t\n\t\tnewRow = Math.max(0, newRow);\n\t\t//newRow = Math.min(document.countLines + 1, newRow);\n\t\t\n\t\tscrollPosition.row = newRow;\n\t}\n\t\n\tredraw();\n}\n\nfunction resize() {\n\tcanvas.width = main.offsetWidth;\n\tcanvas.height = main.offsetHeight;\n\t\n\t/*\n\tsetting width/height resets the context, so need to apply things\n\tlike textBaseline here\n\t*/\n\t\n\tcontext.textBaseline = \"bottom\";\n\t\n\tredraw();\n}\n\nfunction redraw() {\n\tlet now = Date.now();\n\t\n\trender(\n\t\tcontext,\n\t\tdocument.lines,\n\t\tselection,\n\t\thiliteWord,\n\t\tscrollPosition,\n\t\t$prefs.font,\n\t\t$prefs.langs[lang].colors,\n\t\tmeasurements,\n\t\t(now - now % 800) % 2 === 0,\n\t);\n}\n\nfunction updateMeasurements() {\n\tmeasurementsDiv.style = inlineStyle({\n\t\tfont: prefs.font,\n\t});\n\t\n\tmeasurementsDiv.innerHTML = \"A\".repeat(100);\n\t\n\tmeasurements = {\n\t\tcolWidth: measurementsDiv.offsetWidth / measurementsDiv.innerHTML.length,\n\t\trowHeight: measurementsDiv.offsetHeight,\n\t};\n}\n\nonMount(async function() {\n\tcontext = canvas.getContext(\"2d\");\n\t\n\tjs($prefs, document.lines);\n\t\n\tupdateMeasurements();\n\tresize();\n\tredraw();\n});\n\n$: canvasStyle = {\n\tcursor: \"text\",\n};\n</script>\n\n<svelte:window on:resize={resize}/>\n\n<style>\n#main {\n\t-webkit-box-flex: 1;\n\t        flex-grow: 1;\n\toverflow: hidden;\n\tcolor: black;\n}\n\n#measurements {\n\tposition: absolute;\n\tleft: -9000px;\n\ttop: -9000px;\n}\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb21wb25lbnRzL0VkaXRvci5zdmVsdGUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBO0NBQ0MsbUJBQVk7U0FBWixZQUFZO0NBQ1osZ0JBQWdCO0NBQ2hCLFlBQVk7QUFDYjs7QUFFQTtDQUNDLGtCQUFrQjtDQUNsQixhQUFhO0NBQ2IsWUFBWTtBQUNiIiwiZmlsZSI6InNyYy9jb21wb25lbnRzL0VkaXRvci5zdmVsdGUiLCJzb3VyY2VzQ29udGVudCI6WyJcbiNtYWluIHtcblx0ZmxleC1ncm93OiAxO1xuXHRvdmVyZmxvdzogaGlkZGVuO1xuXHRjb2xvcjogYmxhY2s7XG59XG5cbiNtZWFzdXJlbWVudHMge1xuXHRwb3NpdGlvbjogYWJzb2x1dGU7XG5cdGxlZnQ6IC05MDAwcHg7XG5cdHRvcDogLTkwMDBweDtcbn1cbiJdfQ== */</style>\n\n<div\n\tid=\"main\"\n\tbind:this={main}\n\ton:wheel={wheel}\n>\n\t<canvas\n\t\tbind:this={canvas}\n\t\ton:mousedown={mousedown}\n\t\ton:mouseup={mouseup}\n\t\ton:mousemove={mousemove}\n\t\tstyle={inlineStyle(canvasStyle)}\n\t/>\n</div>\n\n<div id=\"measurements\" bind:this={measurementsDiv}></div>\n"
  ],
  "names": [],
  "mappings": "AAgBwB,KAAK,cAAC,CAAC,AAC7B,OAAO,CAAE,WAAW,CACpB,OAAO,CAAE,IAAI,CACb,kBAAkB,CAAE,QAAQ,CAC5B,qBAAqB,CAAE,MAAM,CACrB,cAAc,CAAE,MAAM,CAC9B,MAAM,CAAE,KAAK,AAAE,CAAC;ACgIlB,KAAK,eAAC,CAAC,AACN,gBAAgB,CAAE,CAAC,CACX,SAAS,CAAE,CAAC,CACpB,QAAQ,CAAE,MAAM,CAChB,KAAK,CAAE,KAAK,AACb,CAAC,AAED,aAAa,eAAC,CAAC,AACd,QAAQ,CAAE,QAAQ,CAClB,IAAI,CAAE,OAAO,CACb,GAAG,CAAE,OAAO,AACb,CAAC"
}